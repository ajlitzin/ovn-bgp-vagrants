---

- name: Network appliance configuration
  hosts: spine-*,rack-1-leaf*, rack-2-leaf*
  become: true

  handlers:
    - name: Import re-usable handlers
      ansible.builtin.import_tasks: "handlers/main.yaml"

  tasks:
    - name: Configure interfaces
      ansible.builtin.template:
        src: "{{ interfaces_conf_file }}"
        dest: /etc/network/interfaces
        validate: ifup -a -s -i %s
        mode: "0644"
      notify: Apply interface changes

    - name: Configure FRR daemons file
      ansible.builtin.template:
        src: "{{ frr_daemons_file }}"
        dest: /etc/frr/daemons
        mode: "0640"
      notify:
        - Restart frr

    - name: Configure FRR
      ansible.builtin.template:
        src: "{{ frr_conf_file }}"
        dest: /etc/frr/frr.conf
        validate: vtysh -f %s --dryrun
        mode: "0640"
      notify:
        - Reload frr

- name: Configure Servers
  hosts: rack-1-host*
  gather_facts: true
  become: true

  vars_files:
    - group_vars/linux-hosts.yaml

  handlers:
    - name: Import re-usable handlers
      ansible.builtin.import_tasks: "handlers/main.yaml"

  tasks:
    - name: Build list of YUM repo files
      ansible.builtin.find:
        paths:
          - /etc/yum.repos.d/
        patterns:
          - 'CentOS-*'
        use_regex: false
      register: yum_repo_files
      when: ansible_distribution == "CentOS"

    - name: Comment out YUM mirrorlist links
      ansible.builtin.replace:
        dest: "{{ item.path }}"
        regexp: '^mirrorlist'
        replace: '#mirrorlist'
        backup: true
      loop: "{{ yum_repo_files.files }}"
      when: ansible_distribution == "CentOS"

    - name: Replace YUM baseurl
      ansible.builtin.replace:
        dest: "{{ item.path }}"
        regexp: '^#baseurl=http://mirror.centos.org'
        replace: 'baseurl=http://vault.centos.org'
      loop: "{{ yum_repo_files.files }}"
      when: ansible_distribution == "CentOS"


    - name: Ensure ipv6 is enabled
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.disable_ipv6
        value: '0'
        sysctl_file: /etc/sysctl.conf
        state: present
        reload: true

    - name: Ensure zebra and bgpd daemons are enabled
      tags:
        - never
        - frr
      ansible.builtin.lineinfile:
        path: /etc/frr/daemons
        regexp: '(^zebra|bgpd=)no'
        backrefs: true
        line: '\g<1>yes'
        state: present

# Is this still required?  It's not included in the daemons file
# included in the ovn-bgp-agent repo that stack.sh clones
# zebra_options=("-A 127.0.0.1 --vrfwnetns")
    # - name: Ensure VRFWNETNS is enabled at the zebra options
      # tags:
      #   - never
      #   - frr
    #   ansible.builtin.lineinfile:
    #     path: /etc/frr/daemons
    #     regexp: '--vrfwnetns'
    #     state: absent
    #   check_mode: true
    #   changed_when: false
    #   register: vrfwnetns_found

    # - name: Add missing VRFWNETNS to zebra options
      # tags:
      #   - never
      #   - frr
    #   ansible.builtin.lineinfile:
    #     path: /etc/frr/daemons
    #     regexp: 'zebra_options=(.*)(\")'
    #     backrefs: true
    #     line: 'zebra_options=\g<1> --vrfwnetns\g<2>'
    #     state: present
    #   when: not vrfwnetns_found.found

    - name: Configure FRR
      tags:
        - never
        - frr
      ansible.builtin.template:
        src: "{{ frr_conf_file }}"
        dest: /etc/frr/frr.conf
        validate: vtysh -f %s --dryrun
        mode: "0640"
      notify:
        - Reload frr

    - name: Start frr now and on boot
      tags:
        - never
        - frr
    # FCN of module does not work; get module not found error
      systemd:
        state: started
        enabled: true
        name: frr

    - name: Centos - Configure dummy interface IP
      community.general.nmcli:
        type: dummy
        conn_name: '{{ item.conn_name }}'
        ip4: '{{ item.ip4 }}'
        state: present
      with_items:
        - '{{ nmcli_dummy }}'
      when: ansible_distribution == "CentOS"

    - name: Centos - Configure Ethernet interface IPs
      community.general.nmcli:
        type: ethernet
        conn_name: '{{ item.conn_name }}'
        ip4: '{{ item.ip4 }}'
        state: present
      with_items:
        - '{{ nmcli_ethernet }}'
      when: ansible_distribution == "CentOS"

    - name: Centos - Bring up eth1 and eth2
      ansible.builtin.command:
        cmd: "nmcli con up {{ item }}"
      register: int_up_result
      changed_when: 'int_up_result.rc == 0 and "File exists" not in int_up_result.stderr'
      loop:
        - eth1
        - eth2
      when: ansible_distribution == "CentOS"

    - name: Ubuntu - add netplan config for lo, eth1, and eth2
      ansible.builtin.template:
        src: ubuntu-netplan.j2
        dest: /etc/netplan/02-netcfg.yaml
        mode: '0600'
      when: ansible_distribution == "Ubuntu"

    - name: Ubuntu - Apply netplan configuration
      ansible.builtin.command: netplan apply
      when: ansible_distribution == "Ubuntu"

    - name: Create dir for devstack installation
      ansible.builtin.file:
        owner: vagrant
        group: root
        path: /opt/stack
        mode: '0755'
        state: directory

    - name: Clone ovn-bgp-agent repo
      become: true
      ansible.builtin.git:
        clone: true
        repo: https://opendev.org/openstack/ovn-bgp-agent
        dest: /opt/stack/ovn-bgp-agent
        version: 1.0.0

    # could reduce this repitition by using hostvars for leaf1/2 ips
    # blog uses the lo IP as the src for the route, but we're adding the IP
    # to dummy0 instead and dummy interfaces can be used as a src for routes
    - name: Configure static routes for rack-1-host-1
      tags: never
      ansible.builtin.command:
        cmd: "ip route a 0.0.0.0/0 nexthop via 100.65.1.1 dev eth1 nexthop via 100.64.1.1 dev eth2"
      register: ip_route_result
      changed_when: 'ip_route_result.rc == 0 and "File exists" not in ip_route_result.stderr'
      failed_when: 'ip_route_result.rc != 0 and "File exists" not in ip_route_result.stderr'
      when: inventory_hostname == 'rack-1-host-1'

    - name: Configure static routes for rack-1-host-2
      tags: never
      ansible.builtin.command:
        cmd: "ip route a 0.0.0.0/0 nexthop via 100.65.1.5 dev eth1 nexthop via 100.64.1.5 dev eth2"
      register: ip_route_result
      changed_when: 'ip_route_result.rc == 0 and "File exists" not in ip_route_result.stderr'
      failed_when: 'ip_route_result.rc != 0 and "File exists" not in ip_route_result.stderr'
      when: inventory_hostname == 'rack-1-host-2'

    - name: Configure static routes for rack-2-host-1
      tags: never
      ansible.builtin.command:
        cmd: "ip route a 0.0.0.0/0 nexthop via 100.65.2.1 dev eth1 nexthop via 100.64.2.1 dev eth2"
      register: ip_route_result
      changed_when: 'ip_route_result.rc == 0 and "File exists" not in ip_route_result.stderr'
      failed_when: 'ip_route_result.rc != 0 and "File exists" not in ip_route_result.stderr'
      when: inventory_hostname == 'rack-2-host-1'

    - name: Configure static routes for rack-2-host-2
      tags: never
      ansible.builtin.command:
        cmd: "ip route a 0.0.0.0/0 nexthop via 100.65.2.5 dev eth1 nexthop via 100.64.2.5 dev eth2"
      register: ip_route_result
      changed_when: 'ip_route_result.rc == 0 and "File exists" not in ip_route_result.stderr'
      failed_when: 'ip_route_result.rc != 0 and "File exists" not in ip_route_result.stderr'
      when: inventory_hostname == 'rack-2-host-2'
